//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoviesService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/MoviesService2020")]
    public partial class Movie : object
    {
        
        private string GenreField;
        
        private int IdField;
        
        private System.Nullable<System.DateTime> ReleaseDateField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre
        {
            get
            {
                return this.GenreField;
            }
            set
            {
                this.GenreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ReleaseDate
        {
            get
            {
                return this.ReleaseDateField;
            }
            set
            {
                this.ReleaseDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MoviesService.IMovieService")]
    public interface IMovieService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/CreateMovie", ReplyAction="http://tempuri.org/IMovieService/CreateMovieResponse")]
        System.Threading.Tasks.Task<int> CreateMovieAsync(MoviesService.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetMovies", ReplyAction="http://tempuri.org/IMovieService/GetMoviesResponse")]
        System.Threading.Tasks.Task<MoviesService.Movie[]> GetMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetMovie", ReplyAction="http://tempuri.org/IMovieService/GetMovieResponse")]
        System.Threading.Tasks.Task<MoviesService.Movie> GetMovieAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/UpdateMovie", ReplyAction="http://tempuri.org/IMovieService/UpdateMovieResponse")]
        System.Threading.Tasks.Task<bool> UpdateMovieAsync(MoviesService.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/DeleteMovie", ReplyAction="http://tempuri.org/IMovieService/DeleteMovieResponse")]
        System.Threading.Tasks.Task<bool> DeleteMovieAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMovieServiceChannel : MoviesService.IMovieService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MovieServiceClient : System.ServiceModel.ClientBase<MoviesService.IMovieService>, MoviesService.IMovieService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MovieServiceClient() : 
                base(MovieServiceClient.GetDefaultBinding(), MovieServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMovieService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MovieServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MovieServiceClient.GetBindingForEndpoint(endpointConfiguration), MovieServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MovieServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MovieServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MovieServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MovieServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MovieServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> CreateMovieAsync(MoviesService.Movie movie)
        {
            return base.Channel.CreateMovieAsync(movie);
        }
        
        public System.Threading.Tasks.Task<MoviesService.Movie[]> GetMoviesAsync()
        {
            return base.Channel.GetMoviesAsync();
        }
        
        public System.Threading.Tasks.Task<MoviesService.Movie> GetMovieAsync(int ID)
        {
            return base.Channel.GetMovieAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMovieAsync(MoviesService.Movie movie)
        {
            return base.Channel.UpdateMovieAsync(movie);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMovieAsync(int ID)
        {
            return base.Channel.DeleteMovieAsync(ID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMovieService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMovieService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.10.6.132/MoviesSVC/MovieService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MovieServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMovieService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MovieServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMovieService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMovieService,
        }
    }
}
